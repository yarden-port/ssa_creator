name: Create Self-Service Action in Port

on:
  workflow_dispatch:
    inputs:
      action_title:
        description: 'Action Title'
        required: true
      action_description:
        description: 'Action Description'
        required: true
      action_type:
        description: 'Action Type (e.g., Create, Day-2, Delete)'
        required: true
        default: 'Create'
      blueprint:
        description: 'Blueprint'
        required: true
      inputs:
        description: 'Inputs as JSON'
        required: true
      invocation_type:
        description: 'Invocation Type'
        required: true
      webhook_endpoint_url:
        description: 'Webhook Endpoint URL'
        required: false
      github_repository:
        description: 'GitHub Repository'
        required: false
      github_workflow_file_name:
        description: 'GitHub Workflow File Name'
        required: false

jobs:
  create_ssa:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
      - name: Create Self-Service Action
        run: |
          import json
          import requests
          
          # Construct the SSA JSON
          ssa_data = {
              "identifier": "${{ github.run_id }}",
              "title": "${{ github.event.inputs.action_title }}",
              "description": "${{ github.event.inputs.action_description }}",
              "trigger": {
                  "type": "self-service",
                  "operation": "${{ github.event.inputs.action_type }}",  # Dynamically assigned based on input
                  "userInputs": json.loads('${{ github.event.inputs.inputs }}')
              },
              "invocationMethod": {
                  "type": "${{ github.event.inputs.invocation_type }}",
                  "endpointUrl": "${{ github.event.inputs.webhook_endpoint_url }}"
              }
          }

          response = requests.post(
              'https://api.getport.io/v1/actions',
              json=ssa_data,
              headers={'Authorization': 'Bearer YOUR_PORT_API_TOKEN'}
          )
          
          if response.status_code == 200:
              print('SSA created successfully')
          else:
              print('Failed to create SSA:', response.text)

          env:
            YOUR_PORT_API_TOKEN: ${{ secrets.PORT_API_TOKEN }}
