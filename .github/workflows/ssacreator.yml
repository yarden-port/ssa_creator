name: Create Self-Service Action in Port

on:
  workflow_dispatch:
    inputs:
      port_context:
        description: 'Complete context from Port as JSON string'
        required: true

jobs:
  create_ssa:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
      - name: Create Self-Service Action
        run: |
          import json
          import requests
          
          # Parse the JSON input to extract Port context
          port_context = json.loads('${{ github.event.inputs.port_context }}')

          # Construct the SSA JSON using the port_context
          ssa_data = {
              "identifier": port_context['identifier'],  # Assuming identifier is part of the context
              "title": port_context['title'],  # Assuming title is part of the context
              "description": port_context.get('description', 'No description provided'),  # Optional description
              "trigger": {
                  "type": "self-service",
                  "operation": port_context['operation'],  # Assuming operation type is provided
                  "userInputs": port_context  # Using the entire context as userInputs
              },
              "invocationMethod": {
                  "type": port_context.get('invocation_type', 'RUN_GITHUB_ACTION'),  # Default invocation type
                  "endpointUrl": port_context.get('webhook_endpoint_url', '')
              }
          }

          # Post request to Port's API
          response = requests.post(
              'https://api.getport.io/v1/actions',
              json=ssa_data,
              headers={'Authorization': 'Bearer YOUR_PORT_API_TOKEN'}
          )
          
          if response.status_code == 200:
              print('SSA created successfully')
          else:
              print('Failed to create SSA:', response.text)

          env:
            YOUR_PORT_API_TOKEN: ${{ secrets.PORT_API_TOKEN }}
